import 'package:flutter/material.dart';
import 'package:mustang_app/models/robot.dart';
import 'package:mustang_app/models/team.dart';
import 'package:mustang_app/components/shared/screen.dart';
import 'package:mustang_app/pages/scouting/post_scouter.dart';
import '../../services/scouting_operations.dart';

class PitScouter extends StatefulWidget {
  static const String route = '/PitScouter';
  static String _teamNumber;

  PitScouter({String teamNumber}) {
    _teamNumber = teamNumber;
  }

  @override
  _PitScouterState createState() => _PitScouterState(_teamNumber);
}

class _PitScouterState extends State<PitScouter> {
  String _teamNumber;
  DriveBaseType _driveBase = DriveBaseType.TANK;
  ClimbCapability _climb = ClimbCapability.NONE;
  ProgrammingLanguage _lang = ProgrammingLanguage.OTHER;
  ShootingCapability _shoot = ShootingCapability.NONE;
  EndGameCapability _end = EndGameCapability.PARK;
  List<TextEditingController> myController = List.generate(9, (i) => TextEditingController());
  List<String> prompts = [
     "1. What cool features does their robot have? What are they proud of?",
     "2. Describe their auton routine.",
     "3. Any final comments about the robot?",
     //below is for pit scouting
     "4. What is their battery capacity?",
     "5. What is their battery charge capacity?", 
     "6. Any cool new tools they are using?",
     "7. What are the pros and cons of their storage?", 
     "8. Is their pit asthetically pleasing? Why or why not?", 
     "9. Any final comments?",
  ];
  List<List<Object>> boxStates = [
    ['Inner', null],
    ['Outer', null],
    ['Lower', null],
    ['Rotation', null],
    ['Position', null],
    ['Climb', null],
    ['Level', null],
  ];

  _PitScouterState(teamNumber) {
    _teamNumber = teamNumber;
  }

  Widget createTitle(String text) {
    return ListTile(
      tileColor: Colors.green,
      title: Center(
        child: Text(text, style: TextStyle(fontSize: 20, color: Colors.white)),
      ),
    );
  }



  Widget createTextQuestion(String question, int num) {
    return Column(
      children: <Widget>[
        Text(
          question, 
           textAlign: TextAlign.start,
             // textScaleFactor: 2.0,
              style: TextStyle (
               // fontWeight: FontWeight.w400,
                fontSize: 20.0,
                letterSpacing: 1.0,
                wordSpacing: 1.0,
              )
        ),
         SizedBox(height:10),
        TextField(
          controller: myController[num],
          decoration: InputDecoration(
            border: OutlineInputBorder(),
          ),
        ),
        SizedBox(height:20),
      ],
    );
  }



  Widget createCheckBox(String text) {
    int i;
    for (int j = 0; j < boxStates.length; j++) {
      if ((boxStates[j].contains(text))) i = j;
    }
    String last = text.substring(text.length - 2);
    String label = text +
        (last == "er"
            ? " Port"
            : last == "on"
                ? " Control"
                : "er");
    return CheckboxListTile(
        value: boxStates[i][1] != null ? true : false,
        onChanged: (bool val) {
          setState(() {
            boxStates[i][1] == null
                ? boxStates[i][1] = true
                : boxStates[i][1] = !boxStates[i][1];
          });
        },
        title: Text(
          label,
          style: new TextStyle(fontSize: 20.0),
        ),
        tileColor: Colors.amber,
        activeColor: boxStates[i][1] == true ? Colors.green : Colors.red);
      
  }
                ListTile(
                  title: Text(
                    'Programming Language',
                    style: new TextStyle(fontSize: 20.0),
                  ),
                  trailing: DropdownButton<ProgrammingLanguage>(
                    value: _lang,
                    icon: Icon(Icons.arrow_downward),
                    iconSize: 24,
                    elevation: 16,
                    style: TextStyle(color: Colors.green, fontSize: 20.0),
                    underline: Container(
                      height: 2,
                      color: Colors.green,
                    ),
                    onChanged: (ProgrammingLanguage lang) {
                      setState(() {
                        _lang = lang;
                      });
                    },
                    items: <ProgrammingLanguage>[
                      ProgrammingLanguage.JAVA, 
                      ProgrammingLanguage.PYTHON,
                      ProgrammingLanguage.C,
                     ProgrammingLanguage.CPP,
                     ProgrammingLanguage.OTHER
                    ].map<DropdownMenuItem<ProgrammingLanguage>>(
                        (ProgrammingLanguage lang) {
                      return DropdownMenuItem<ProgrammingLanguage>(
                        value: lang,
                        child: Center(
                            child: Text(lang.toString().substring(
                                lang.toString().indexOf('.') + 1))),
                      );
                    }).toList(),
                  ),
                ),
             
                ListTile(
                  title: Text(
                    'Endgame Capability',
                    style: new TextStyle(fontSize: 20.0),
                  ),
                  trailing: DropdownButton<EndGameCapability>(
                    value: _end,
                    icon: Icon(Icons.arrow_downward),
                    iconSize: 24,
                    elevation: 16,
                    style: TextStyle(color: Colors.green, fontSize: 20.0),
                    underline: Container(
                      height: 2,
                      color: Colors.green,
                    ),
                    onChanged: (EndGameCapability end) {
                      setState(() {
                        _end = end;
                      });
                    },
                    items: <EndGameCapability>[
                      EndGameCapability.PARK, 
                      EndGameCapability.CLIMB,
                      EndGameCapability.LEVEL,
                    ].map<DropdownMenuItem<EndGameCapability>>(
                        (EndGameCapability end) {
                      return DropdownMenuItem<EndGameCapability>(
                        value: end,
                        child: Center(
                            child: Text(end.toString().substring(
                                end.toString().indexOf('.') + 1))),
                      );
                    }).toList(),
                  ),
                ),
          
    